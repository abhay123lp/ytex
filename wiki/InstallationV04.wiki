#summary Installation for YTEX v0.4
#labels Phase-Deploy

= Introduction =

YTEX v0.4 is under development.  We have implemented the following features:

  * Support for Linux.  We have tested YTEX on Linux w/ MySQL.

  * Support for updated UMLS.  For previous versions, we sent users UMLS data for named entity recognition based on an older version of the UMLS, and using only the SNOMED, ICD, and NCI vocabularies.  For this version, we use the [http://www.ncbi.nlm.nih.gov/books/NBK9685/#ch03.I31_Data_Files UMLS tables] directly.  This requires that you install UMLS in your database.

  * Support for exporting data to R, Matlab, SAS, Libsvm, and SVMLight

YTEX is distributed with a tiny subset of the UMLS for demonstration purposes.  For production use, [http://www.nlm.nih.gov/research/umls/implementation_resources/scripts/README_RRF_MySQL_Output_Stream.html you must install UMLS locally] (if you ask us nicely - vngarla at gmail.com - we can send you a dump of our UMLS database tables).  YTEX currently uses the <tt>MRCONSO</tt> and <tt>MRSTY</tt> tables.  We have developed scripts for loading the UMLS into SQL Server (NLM only provides scripts for Oracle & MySQL).

== Prerequisites ==
[Installation#Prerequisites Same as for v0.3]

As mentioned above, you must install UMLS in your database.  NLM provides scripts for installing UMLS in MySQL and Oracle.  Refer to [UMLS_SQL_SERVER UMLS SQL Server Installation] for instructions on how to install UMLS in MS SQL Server.


== Installation ==
  # Create a directory where ytex will be installed, e.g

Linux:
{{{
mkdir ${HOME}/clinicalnlp
}}}

Windows:
{{{
c:\java\clinicalnlp
}}}

  # Download the following archives to the installation directory: 
    * YTEX Archive: `ytex-with-dependencies-vX.Y.zip`
    Download from this site 
    * LVG 2010 Archive: `lvg2010lite.tgz` (optional) 
    ([http://lexsrv3.nlm.nih.gov/LexSysGroup/Projects/lvg/2010/release/lvg2010lite.tgz download]). Make sure you save this file as lvg2010lite.tgz (Internet Explorer may rename this). The lvg is required for stemming; if you do not download this file, stemming will not be performed. 
    * If you get UMLS from us, place the archive (`umls-<platform>.zip`) in this directory as well
  # Extract `ytex-with-dependencies-vX.Y.zip` to the installation directory; this will create a ytex subdirectory, e.g. windows `c:\java\clinicalnlp\ytex` / linux `${HOME}/clinicalnlp/ytex`, referred to subsequently as YTEX_HOME.
  # Edit environment batch/shell script, and Fix the path references to match your environment
    * windows <tt>YTEX_HOME\setenv.cmd</tt>
    * linux <tt>YTEX_HOME/ytex.profile</tt>
  # Create `YTEX_HOME\config\desc\ytex.properties`: In this file, you specify the database connection parameters. Use `YTEX_HOME\config\desc\ytex.properties.<db type>.example` as a template.
  # Execute the setup script.  
    * *windows*: Open a command prompt, navigate to YTEX_HOME, and execute setup script:
{{{
cd /d c:\clinicalnlp\ytex
setup all
}}}
    * *linux*: From a shell, cd to the YTEX_HOME directory, set the environment, make sure necessary scripts are executable, and execute the ant script:
{{{
cd ${HOME}/clinicalnlp/ytex
chmod u+x *.profile
chmod u+x ../apache-ant-1.8.0/bin/ant
chmod u+x *.sh
. ./ytex.profile
ant -buildfile build-setup.xml -Dytex.home=${YTEX_HOME} all > setup.out 2>&1 &
tail -f setup.out
}}}

This will call the ant script `build-setup.xml`, which does the following:
    * Unpacks lvg data files
    * Generates configuration files from templates
    * Sets up Semantic Search Web Application 
    The semantic search web application will be deployed to a tomcat server under `YTEX_HOME\web\catalina`. 
    * Sets up YTEX Database Objects 
    The installation executes SQL scripts located in the `YTEX_HOME\data` directory, and imports umls tables (if they are not already in the database). All YTEX database objects will be dropped and recreated. If this is the initial installation, ignore the errors about objects not existing when they are being dropped. 

== Notes on UMLS Installation ==
During setup, we try to see if the UMLS is installed in the database (we look for the MRCONSO table); if we don't find it, we look for a <tt>umls-(platform).zip</tt> file with the tables. If we don't find that we load the sample data files included in the YTEX distribution - this contains a tiny subset of the UMLS for use with the YTEX examples.

The cTAKES Database Lookup algorithm requires a table/view that contains the first word of a concept, a concept code, and the full text of the concept.  The <tt>MRCONSO</tt> table contains concept codes (CUI field) and the full text of the concept (STR field).  We generate a table <tt>umls_aui_fword</tt> that contains the first word of every concept in the <tt>MRCONSO</tt> table.  We then join the <tt>umls_aui_fword</tt> and <tt>MRCONSO</tt> tables, to create a view ([MySQL for mysql a table]) that contains a subset of the UMLS (by default, the SNOMED-CT and RXNORM vocabularies).  You are free to replace this view with subsets of the UMLS of your liking; refer to <tt>YTEX_HOME/data/mysql/umls/create_view.template.sql</tt>.

=== Differences between cTAKES/ARC/YTEX ===
You are free to use whatever dictionary you like with cTAKES/ARC/YTEX.  'By default' cTAKES/ARC are configured to use a database table for SNOMED-CT, and a lucene index for RXNORM.  In addition cTAKES/ARC store the SNOMED Codes for concepts.

In contrast, YTEX uses only a database table for lookup, and only stores the UMLS CUIs.  The reasons for this include:
  * Performance
  Using the RXNORM lucene index incurs some memory requirements (1gb heap).  For each UMLS concept it finds, cTAKES executes another query to find the corresponding SNOMED codes.  Therefore, for each word that it tries to map, cTAKES is running 2 queries (snomed + rxnorm lookups) + n queries (cui to snomed lookup).  YTEX in contrast looks in a single database table.  Thus, the dictionary lookup in YTEX runs just 1 query (umls lookup).
  * Cleaner Data Model
  cTAKES/ARC store the SNOMED-CT code and the UMLS CUI.  YTEX in contrast stores only the UMLS CUI: YTEX is DB-oriented, and storing only the UMLS CUI corresponds to a normalized data model.  To map UMLS CUIs to codes from any source vocabulary (e.g. SNOMED-CT/RXNORM), you can simply join the <tt>ytex.anno_ontology_concept</tt> and <tt>umls.mrconso</tt> tables.  

If you like the way cTAKES is doing things, you can configure YTEX to get the same functionality.  Refer to [http://ohnlp.sourceforge.net/cTAKES/#boost_performance the cTAKES documentation] for information on setting up the tables / lucene indices and configuring the Dictionary Lookup Annotator.

== Notes on running examples on linux ==
We've created .sh files for many of the .cmd files.  For the others, you should be able to figure out what to do by looking at the .cmd files.