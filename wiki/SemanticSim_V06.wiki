#summary Semantic Similarity Tools for V0.6 and above
#labels Phase-Deploy

= Introduction =

Semantic relatedness refers to human judgments of the degree to which a given pair of concepts is related.  Automated measures of semantic relatedness estimate the similarity between pairs of concepts, and play an important role in a variety of text processing tasks.  Semantic similarity measures include path finding measures based purely on path distances, and information-content based measures based on taxonomic relationships and information content (IC) of concepts, a measure of concept frequency.  [http://www.sciencedirect.com/science/article/pii/S1532046406000645 Previous studies] that took advantage of a large, annotated medical corpus to estimate concept frequencies showed that information content based measures of semantic similarity outperform path finding measures.  Unfortunately, large annotated corpora are not typically available for many applications.  To overcome the problems inherent to corpus IC based measures, some authors have proposed computing IC from the taxonomic structure of an ontology; this is referred to as the intrinsic information content (intrinsic IC).  The underlying assumption is that concepts with few children and many parents are less frequent (have a higher IC). Intrinsic IC based measures have been [http://www.sciencedirect.com/science/article/pii/S1532046411000645 shown to rival that of corpus-based measures].

YTEX provides a generalizable framework for the computation of path finding, corpus & intrinsic information content based semantic similarity measures from any domain ontology.  This page describes the usage and configuration of the YTEX Semantic Similarity Tools

= Usage =
YTEX provides a web application client, web services interface, RESTful interface, and command-line interface to compute similarity measures.  The demo similarity web app is available under http://sim.ytex-nlp.org; if you plan to use this application extensively, please install ytex locally.  Please refer to [http://www.sciencedirect.com/science/article/pii/S1532046411000645 Sanchez & Batet] for an excellent overview of similarity measures in general, and intrinsic information content (IC) based measures in particular.  We scale all measures to the unit interval.

YTEX allows the declarative definition of concept graphs in which nodes represent concepts and edges taxonomical relationships, and can compute the similarity between nodes in these graphs.  YTEX comes with two concept graphs derived from the UMLS (version 2011AB)
  * sct-msh-csp-aod: concepts from the SNOMED-CT, MeSH, CRISP, and Alcohol and Drug thesaurus
  * umls: concepts from all restriction free (level 0) UMLS source vocabularies and SNOMED-CT
You can configure additional concept graphs (documented see below).

The YTEX demo application (http://www.ytex-nlp.org/ytex.web) has 2 concept graphs configured: 
  * sct: SNOMED-CT concept graph derived from the 2011-07 SNOMED-CT international release
  * sct-umls: SNOMED-CT concept graph derived from UMLS 2011AB

== Similarity Web App ==
The similarity web app allows you to select
  * select a concept graph against which measures should be computed
  * specify concept pair(s)
  * specify measures

The similarity web application has two pages:

=== Similarity Single ===
Compute similarities for a single concept pair.  In addition to the similarity values, this page outputs the path between concepts.  You can enter the text of the concept, and the application will attempt to find the corresponding concept id (CUI).  Alternatively, you can simply enter the concept id.

=== Similarity Multiple ===
Similarity Multiple: Compute the similarity between multiple pairs of concepts.  Enter each concept pair on a different line, and separate concepts by a comma or whitespace.  The output can be exported to a CSV file or Excel spreadsheet.

To compute similarity measures on the 'canonical' Pedersen benchmark on the demo server, simply select the SNOMED-CT concept graph, and copy and paste the following into the concept pairs box (these are the snomed concept ids, not the UMLS CUIs):
<pre>
42399005	42399005
70317007	17369002
80891009	74281007
230690007	55641003
48500005	58214004
125369001	415582006
128462008	443961001
42343007	19242006
51615001	126713003
373421000	51197009
79619009	49436004
254935002	1386000
255631004	106190000
59282003	22298006
57406009	396275006
69896004	200936003
11381005	61968008
73211009	38341003
32498003	179344006
70179006	73761001
128863005	126692004
74400008	64859006
35489007	128045006
55822004	363346000
24700007	69322001
13200003	57190000
39772007	15825003
12856003	244568009
87715008	420054005
</pre>

To compute similarities on the SNOMED-CT derived from the UMLS, select the SNOMED-CT from UMLS 2011AB concept graph, and enter the following concept pairs: 
<pre>
C0035078	C0035078
C0156543	C0000786
C0018787	C0027061
C0038454	C0021308
C0011253	C0036341
C1265880	C0009814
C0006826	C0001418
C0018802	C0034063
C0034069	C0242379
C0011991	C0344375
C0026269	C0004238
C0006118	C0151699
C0003232	C0020517
C0034065	C0027051
C0007286	C0029408
C0003873	C0409974
C0702166	C0039142
C0011849	C0020538
C0010137	C0086511
C0206698	C0009378
C0333997	C0007107
C0003615	C0029456
C0011581	C0007642
C0020473	C0006826
C0026769	C0033975
C0030920	C0027092
C0034887	C0003483
C0042345	C0224701
C0043352	C0023891
</pre>

== Similarity Web/RESTful Services ==
As with the web application, you can specify the concept graph, concept pairs, and measures for which similarities should be computed.  Both methods accept a list of measures; these are:
  * Path-Finding Measures
    ** WUPALMER: Wu & Palmer
    ** LCH: Leacock & Chodorow
    ** PATH: Path
    ** RADA: Rada
  * Corpus IC Based Measures:
    ** LIN: Lin
  * Intrinsic IC Based Measures:
    ** INTRINSIC_LIN: Intrinsic IC based Lin
    ** INTRINSIC_LCH: Intrinsic IC based Leacock & Chodorow
    ** INTRINSIC_PATH: Intrinsic IC based Path, identical to Jiang & Conrath
    ** INTRINSIC_RADA: Intrinsic IC based Rada
    ** JACCARD: Intrinsic IC based Jaccard
    ** SOKAL: Intrinsic IC based Sokal & Sneath

=== RESTful interface ===
To get the similarity between a pair of concepts using the concept graph `sct-umls`, and the LCH and Intrinsic LCH measures:
http://www.ytex-nlp.org/ytex.web/services/rest/similarity?conceptGraph=sct-umls&concept1=C0018787&concept2=C0024109&metrics=LCH,INTRINSIC_LCH&lcs=true

The parameters are:
  * concept1/concept2 the concept ids
  * metrics comma-separated list of metrics
  * conceptGraph (optional) concept graph to use; if not specified will use the default
  * lcs (optional) set to true to get the paths through the Least Common Subsumer.
Will return XML with a list of similarities corresponding to the list of metrics.  See the WSDL for the corresponding web service for the schema.

To get a list of concept graphs: 
http://www.ytex-nlp.org/ytex.web/services/rest/getConceptGraphs

To get the 'default' concept graph: http://sim.ytex-nlp.org/ytex.web/services/rest/getDefaultConceptGraph

=== Web Services interface ===
The Web Services interface is analogous to the restful interface, but allows the computation of similarities fro multiple concept pairs.  See http://www.ytex-nlp.org/ytex.web/services/conceptSimilarityWebService?wsdl

== Command-Line Interface ==
The `ConceptSimilarityServiceImpl` java program accepts a list of concept pairs, and outputs their similarities in a tab-delimited format.  It accepts the following arguments:
  * `-metrics`: required, comma separated list of metrics (see above in for valid values)
  * `-out`: optional file to send output to.  if not specified will send output to standard out.
  * `-lcs`: should the least common subsumer and paths be output for each concept pair?
  * `-concepts`: a list of concept pairs, or a file with concept pairs.  For a file place each concept pair on a separate line, separate concepts by whitespace or commas.  For a list of concept pairs, separate each concept by a comma, each pair by a semicolon:
{{{
cd <YTEX_HOME>
java -Xmx1500m -Dlog4j.configuration=file:./config/desc/log4j.properties -classpath libs.system/ytex.kernel.jar ytex.kernel.metric.ConceptSimilarityServiceImpl -concepts C0018787,C0024109;C0034069,C0242379 -metrics LCH,INTRINSIC_LCH
}}}

The concept graph that will be used is defined in `<YTEX_HOME>/config/desc/ytex.properties` with the 'ytex.conceptGraphName` key; alternatively, you can specify the concept graph with the java `-Dytex.conceptGraphName=<concept graph>` option.  The amount of memory needed depends on the concept graph; SNOMED-CT fits comfortably in a 500 MB heap.  The larger `sct-msh-csp-aod` and `umls` graphs need 1500m (-Xmx option).
 
= Configuration =
To create a concept graph, you specify a properties file that contains a query that retrieves all the edges from a taxonomy.  The `ConceptDaoImpl` does the following:
  * executes this query
  * builds a concept graph
  * removes edges that induce cycles
  * writes the concept graph to the file system
  * computes the depth and intrinsic information content of each node in the graph, stores this in the `feature_eval` and `feature_rank` tables
Computing the intrinsic IC is very memory intensive - give this task all the memory that you have for large concept graphs.  Computing the intrinsic IC for the entire UMLS takes 1.5 hours with an 8GB java heap.

As an example, here is what you do to create a concept graph with just the SNOMED-CT vocabulary from the UMLS:

1) Create a properties file that defines the required parameters:
`<YTEX_HOME>\sct-umls.xml`:
{{{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	<entry key="ytex.conceptGraphName">sct-umls</entry>
	<entry key="ytex.conceptGraphQuery"><![CDATA[
	select distinct cui1, cui2 
	from umls.MRREL 
	where sab in ('SNOMEDCT')
	and rel in ('PAR')
	order by cui1, cui2
	]]></entry>
</properties>
}}}

2) Run the `ConceptDaoImpl`:
{{{
cd <YTEX_HOME>
java -Xmx500m -Dlog4j.configuration=file:./config/desc/log4j.properties -classpath libs.system\ytex.kernel.jar ytex.kernel.dao.ConceptDaoImpl -prop sct-umls.xml
}}}
You will get warnings about removing cycles.  The concept graph will be stored in {{{<YTEX_HOME>/conceptGraph}}} directory.

= Similarity Benchmark =
Running the similarity benchmark.
== Prerequisities ==
Tested on windows and linux using the 64-bit jdk.

=== MySQL ===
We test with version 5.1.  The UMLS-only part of the benchmark scripts will work with Oracle & SQL Server.  We load SNOMED-CT and MeSH into the datbase; this has only been tested on MySQL

=== UMLS Install ===
Install UMLS in MySQL As documented in [http://www.nlm.nih.gov/research/umls/implementation_resources/metamorphosys/help.html MetamorphoSys Help], 
and in [http://www.nlm.nih.gov/research/umls/implementation_resources/scripts/index.html Load Scripts].  We used UMLS 2011AB with the default 'SNOMED-CT + Level 0 vocabularies' option.

=== YTEX Install ===
Obviously.

=== CRAN R ===
Used for statistical analysis (computing spearman correlation).  Install Plyr.

=== SNOMED-CT download ===
Download and extract SNOMED-CT from http://www.nlm.nih.gov/research/umls/licensedcontent/snomedctfiles.html (we used 20110731, available from http://download.nlm.nih.gov/umls/kss/IHTSDO20110731/SnomedCT_RF2Release_INT_20110731.zip)
  
=== MeSH download ===
Download following files, and extract the zip files to ${mesh.home}:
  * [http://www.nlm.nih.gov/mesh/termscon.html desc2012.zip]  (extract desc2012.xml from this file) 
  * [http://www.nlm.nih.gov/mesh/termscon.html supp2012.zip]  (extract supp2012.xml from this file) 
  * [http://www.nlm.nih.gov/mesh/2012/download/desc2012.dtd desc2012.dtd]
  * [http://www.nlm.nih.gov/mesh/2012/download/supp2012.dtd supp2012.dtd]

== Running the Benchmark ==
Setup some properties in ytex, run a couple scripts, and you're done.

=== Setup YTEX Properties === 
In YTEX_HOME/config/desc/ytex.properties 
  * set sct.home property to full path of the Snapshot/Terminology directory, and sct.version to the version date.
  * set mesh.home to directory containing desc2012.xml, desc2012.dtd, supp2012.xml, and supp2012.dtd. 
  * set R.bin to directory that contains R executable
{{{
sct.home=E:/temp/SnomedCT_RF2Release_INT_20110731/Snapshot/Terminology
sct.version=20110731
mesh.home=c:/temp/mesh
R.bin=C:/Program Files/R/R-2.13.1/bin/x64
}}}

=== Load SNOMED-CT into database ===
Linux:
{{{
. ${HOME}/ytex.profile
cd ${YTEX_HOME}/data
ant -Dytex.home=${YTEX_HOME} sct.all > sct.out 2>&1 &
}}}

Windows:
{{{
cd %YTEX_HOME%\data
..\setenv.cmd
ant -Dytex.home=%YTEX_HOME% sct.all > sct.out 2>&1 &
}}}

=== Install the precomputed concept graphs ===
TODO move to install instructions.

Linux:
{{{
. ${HOME}/ytex.profile
cd ${YTEX_HOME}/data
ant -Dytex.home=${YTEX_HOME} ic.all > sct.out 2>&1 &
}}}

Windows
{{{
cd %YTEX_HOME%\data
..\setenv.cmd
ant -Dytex.home=%YTEX_HOME% ic.all > ic.out 2>&1 &
}}}

=== Run the benchmark === 
Unpack simbenchmark-vX.Y.zip in your `<YTEX_HOME>` and run the ant script
Linux:
{{{
cd ${YTEX_HOME}
unzip simbenchmark-v0.6.zip
cd simbenchmark
nohup ant -DmaxMemory=8g -Dytex.home=${YTEX_HOME} all > simbenchmark.out 2>&1 &  
}}}
Windows:
{{{
ant -DmaxMemory=8g -Dytex.home=${YTEX_HOME} all > simbenchmark.out 2>&1 
}}}

If you did not install the precomputed concept graphs, set `-DmaxMemory` to as much memory as you can spare, as computing the intrinsic infocontent for the entire UMLS is very memory intensive.

What this does:
  * Parses MeSH XML files, loads into database
  * Generates concept graphs
  * Computes similarity using each benchmark, measure, and concept graph combination.  Benchmark data under `<YTEX_HOME>/simbenchmark/data`
  * Computes spearman correlation with R

Output:
Under `<YTEX_HOME>/simbenchmark/data`
  * simbenchmark-summary.csv: consolidated results with spearman correlation for each concept graph / benchmark / measure combination.
  * simbenchmark-cg-significance.csv: significance of differences between intrinsic lch measures on different concept graphs.
  * simbenchmark-spearman.csv: spearman correlations and p-values
  * sim.txt: similarity computations for each concept pair/measure/concept graph/benchmark 