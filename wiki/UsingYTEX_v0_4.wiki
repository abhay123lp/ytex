#summary Using YTEX v0.4
<wiki:toc max_depth="2" />

=Using YTEX=
This document presumes familiarity with [http://uima.apache.org/index.html UIMA] and [http://ohnlp.sourceforge.net/cTAKES/ cTAKES].

=Annotating Documents=
YTEX is based on UIMA, and standard UIMA Tools can be used to annotate documents with YTEX: you can annotate documents using the standard UIMA Document Analyzer and Collection Processing Engine.  YTEX is distributed with the `YTEXPipeline.xml` analysis engine configuration based on the cTAKES/ARC pipeline with the following modifications:
  * `SentenceAnnotator`: modified to not break sentences on newlines, and to break sentences at (certain) periods.
  * `SegmentRegexAnnotator`: annotate sections based on regular expressions.
  * `DictionaryLookup`: Configured to use the SNOMED-CT sub-vocabulary of the UMLS.
  * `NamedEntityRegexAnnotator`: annotate named entities based on regular expressions.
  * `NegexAnnotator`: this replaces the cTAKES NegationAnnotator.  The NegexAnnotator is based on the Negex negation detection algorithm.
  * `DBConsumer`: Stores annotatations and the XML CAS representation in the database
You are of course welcome to modify/add/remove annotators to the analysis engine and modify configuration parameters.

==UIMA Document Analyzer==
 * start the documentAnalyzer.  windows: double-click/execute `YTEX_HOME\ytexDocumentAnalyzer.bat`, linux: from a shell run the following commands:
{{{
. ${HOME}/ytex.profile
cd ${YTEX_HOME}
./ytexTools.sh DocumentAnalyzer
}}}
 * Set the following options:
   ** Input Directory: `YTEX_HOME\examples\pubmed\abstracts`
   ** Output Directory: `YTEX_HOME\examples\pubmed\ytexoutput` (create this directory)
   ** Analysis Engine: `YTEX_HOME\config\desc\ytex\uima\YTEXPipelineNoDBConsumer.xml` - this Pipeline will not store annotations in the database.
 * Click Run
 * You can then view the anaysis results by double-clicking individual documents.

==UIMA Collection Processing Engine w/ DBCollectionReader==
Clinical Documents from an EMR are typically stored in a database.  We developed an UIMA CollectionReader that retrieves these documents for annotation (thereby avoiding exporting the documents to the file system).  The DBCollection reader works as follows:
  # read all document unique ids into an internal list
  # iterate through each id in the list, and retrieve the document for annotation.

Documents in a database typically are given a Unique ID, and are cross-referenced with other information (e.g. patient id, document type, document date, etc.).  This unique id can be stored in the database along with other document annotations.  This allows you to cross-reference annotation data with other document data.

By default, YTEX supports an integer document unique identifier; YTEX can be configured to support additional/different document identifiers (see [DocKey_v0_4 Document Key Example]).  

The YTEX DBCollection reader is parameterized by 2 queries: a key query and a document query.  The key query  loads document unique ids from a database, and the document query loads a document for a given unique id.  For more information, refer to the example below.

=== Example ===
To illustrate this, we can simply retrieve sample documents stored in the `fracture_demo` table.  To configure and execute the CPE, do the following:
  * Start CPE Configuration Tool
  Windows: run `YTEX_HOME\ytexCPE.bat`, Linux: from YTEX_HOME run `./ytexTools.sh CPE`
  * Clear the CPE Configuration: File->Clear
  * Configure the Collection Reader: In the Collection Reader section click the Browse Button.  For the Descriptor, specify `YTEX_HOME\config\desc\ytex\uima\DBCollectionReader.xml`.
  * Configure Queries: The 'Query Document Keys' and 'Query Get Document' parameters will appear.  Specify queries to retrieve keys and documents.  The key query returns a integer key, named `uid`.  The document query has a `uid` parameter.  The `uid` is stored in the ytex document table, allowing you to link annotations to the source document.  Here are the queries for the fracture demo:
     ** MS SQL Server
Document Key Query (replace schema to match your configuration)
{{{
    select note_id uid from <schema>.fracture_demo
}}}
Document Query
{{{
    select note_text from <schema>.fracture_demo where note_id = :uid
}}}
     ** MySQL
Document Key Query
{{{
    select note_id uid from  fracture_demo
}}}
Document Query
{{{
    select note_text from fracture_demo where note_id = :uid
}}}
     ** Oracle
Document Key Query
{{{
    select note_id ¨uid¨ from fracture_demo
}}}
Document Query
{{{
    select note_text from fracture_demo where note_id = :uid
}}}
  * Configure Analysis Engine
  Click on the 'Add' button in the 'Analysis Engine' section, and select `YTEX_HOME\config\desc\ytex\uima\YTEXPipeline.xml`
    ** analysis_batch: Documents can be assigned a 'group' or analysis_batch.  specify 'test2' here.
  * Run the CPE
  Click the 'Play' button
  * View results
  {{{
  select * from 
  v_document where analysis_batch = 'test2'
  }}}
  Notice that the uid column is set, and refers to the `fracture_demo.note_id`.

==UIMA Collection Processing Engine w/ FileSystemCollectionReader==
You can also load documents from the file system.  See [FileSystemCPE_v0_4 Using the CPE to load documents from the file system].

=Retrieving Documents=

==Using YTEX Views==
Some simple queries (replace schema to match your configuration):
  * View all documents
{{{
select top 1000 document_id, doc_text
from <schema>.v_document
}}}
  * View all sentences that contain a negated UMLS Concept
{{{
select * 
from <schema>.v_document_cui_sent
where code = 'C0024228'
and certainty = -1
}}}

==Using YTEX DBAnnotationViewer==
For a graphical representation of document annotations, use the DBAnnotationViewer.  This modified viewer retrieves the document CAS from the database (as opposed to the plain-vanilla AnnotationViewer which retrieves the CAS from the file system).
  * Execute `YTEX_HOME\ytexDBAnnotationViewer.bat`
  * Select `YTEX_HOME\config\desc\ytex\uima\YTEXPipeline.xml` as the annotation engine
  * Specify document id (e.g. from one of the views)

=Semantic Search Engine=
The semantic search engine allows searching by UMLS Concept id, negation status, patient id, and document date.  It is preconfigured to work with the patient id and document date from VACS Annotations, but can be reconfigured to retrieve these annotations from other tables.  The semantic search engine can also be configured to execute full-text searches (the SQL Server Full Text Index must be enabled for this).

To start the semantic search web app, execute `YTEX_HOME\ytexWeb.cmd`

To use the semantic search web app,
  # Open a browser and navigate to http://localhost:9080/ytex.web
  # login with username 'scott' and password 'wombat'

=Configuring YTEX=
==Named Entity Lookup Table==
By default, YTEX annotates documents with SNOMED concepts.
The UMLS and SNOMED are quite expansive; nevertheless, these vocabularies may lack certain synonyms/lexical variants for clinical concepts, are lack concepts completely.  

To annotate (new) concepts using new lexical variants, do the following:
==Named Entity Recognition Regexs==
The UMLS lookup table may not be flexible enough to identify all variants of a concept; YTEX can also identify concepts using regular expressions.  Simply add a row to the `ref_named_entity_regex` table:
{{{
insert into <schema>.ref_named_entity_regex (regex, coding_scheme, code)
values ('(?i)\bREFER\s+TO\s+.*#{0,1}+\s*\d+','ESLD','DOCREF')
;
}}}

|| column || description ||
|| regex || regular expression  (see java [http://download.oracle.com/docs/cd/E17476_01/javase/1.5.0/docs/api/java/util/regex/Pattern.html?is-external=true pattern]) ||
|| coding_scheme || similar to sourcetype in umls lookup table (see above) ||
|| code || concept id/code ||
|| context || the document section to which the regular expression search should be limited (see sections below) ||

==Negation Detection==
YTEX uses NegEx, which relies on a list of negation triggers.  To add or modify negation triggers, update `YTEX_HOME\config\desc\ytex\uima\annotators\negex_triggers.txt`

==Segments (Sections) Regexs==
YTEX can identify sections within a document using regular expressions.  Update the `ref_segment_regex` table, e.g.:
{{{
insert into <schema>.ref_segment_regex (segment_id, regex) values('FINDINGS', '\nFINDINGS:|\nTECHNIQUE AND FINDINGS|\nPROCEDURE AND FINDINGS:|\nFindings:');
}}}

|| column || description ||
|| segment_id || the segment identifier ||
|| regex || the regular expression that finds the section heading, or finds the entire section ||
|| limit_to_regex || 0 - false - the regular expression only identifies the section heading. In this case, the section will span the text from the heading to the next section. 1 - true - the regular expression identifies the entire section.  The section spans from the beginning to the end of the text covered by the regular expression ||